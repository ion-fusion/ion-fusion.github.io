name: main.yml

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Docker for container builds
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Ion Fusion Website
          org.opencontainers.image.vendor=Ion Fusion

    - name: Build container image
      id: build
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container image
      run: |
        IMAGE_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
        echo "Testing 'jekyll serve' with image: $IMAGE_TAG"
        CONTAINER_ID="$(docker run --rm --publish 4000:4000 --detach "$IMAGE_TAG")"
        echo "Sleeping for 15 seconds while container starts up"
        sleep 15
        curl -f http://localhost:4000/ || exit 1
        docker stop "$CONTAINER_ID"

    - name: Extract site from container image
      run: |
        IMAGE_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
        echo "Extracting built site from image: $IMAGE_TAG"
        CONTAINER_ID="$(docker create "$IMAGE_TAG")"
        docker cp "$CONTAINER_ID:/home/build/site/." ./_site/
        docker rm "$CONTAINER_ID"
        echo "Extracted site contents:"
        ls -la _site/

    - name: Upload site artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
      with:
        name: site-artifacts
        path: _site/
        retention-days: 1

  publish:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Docker for container builds
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

    - name: Log in to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push container image
      id: push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        push: true
        tags: ${{ needs.build.outputs.image-tags }}
        labels: ${{ needs.build.outputs.image-labels }}
        cache-from: type=gha

    - name: Download site artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
      with:
        name: site-artifacts
        path: _site/

    - name: Configure GitHub Pages
      uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5

    - name: Upload site to GitHub Pages
      uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3
      with:
        path: _site/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4

